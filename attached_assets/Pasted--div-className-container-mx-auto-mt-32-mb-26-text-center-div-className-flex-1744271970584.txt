

        <div className="container mx-auto mt-32 mb-26 text-center">
          <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mb-6">
            <img 
              src="/images/Elastos New Logo_Kit-03.png" 
              alt="Elastos Logo" 
              className="h-8 w-auto mb-3 sm:mb-0"
            />
            <h2 className="text-2xl sm:text-xl md:text-3xl lg:text-4xl font-bold text-white">
              Queen ELA: Married to Bitcoin since 2018.
            </h2>
            <button 
              onClick={() => {
                // Scroll to stats section
                window.location.href = "#stats-section";
                
                // Fetch all data
                fetchAllData();
              }}
              className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-[rgba(246,146,26,0.15)] text-white font-[200] transition-all hover:bg-[rgba(246,146,26,0.25)] border border-[rgba(246,146,26,0.25)] ml-2"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M1 4v6h6"/><path d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10"/>
              </svg>
            </button>
          </div>
          
          <div id="stats-section" className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-5xl mx-auto">
            <div className="bg-[#ececec] dark:bg-[#5C8EFF]/[0.06] rounded-lg p-3 sm:p-6 shadow-sm">
              <h3 className="text-lg font-medium mb-4">Current Price</h3>
              {isHashrateLoading ? (
                <div className="flex flex-col items-center justify-center h-[120px]">
                  <Spinner size="lg" />
                </div>
              ) : (
                <>
                  <p className="text-xl sm:text-2xl font-[200]">
                    ${dataFetched && hashrateData?.elaPrice ? hashrateData.elaPrice.toFixed(2) : '1.24'}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">
                    Per ELA
                  </p>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5">
                    <div 
                      className="bg-[#F6921A] h-1.5 rounded-full" 
                      style={{ 
                        width: `${dataFetched && hashrateData?.elaPrice 
                          ? ((hashrateData.elaPrice) / 77 * 100) 
                          : 1.6}%` 
                      }} 
                    />
                  </div>
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
                    {dataFetched && hashrateData?.elaPrice 
                      ? ((hashrateData.elaPrice) / 77 * 100).toFixed(1) 
                      : '1.6'}% from ATH ($77.00)
                  </p>
                </>
              )}
            </div>

            <div className="bg-[#ececec] dark:bg-[#5C8EFF]/[0.06] rounded-lg p-3 sm:p-6 shadow-sm">
              <h3 className="text-lg font-medium mb-4">Total Supply</h3>
              {isSupplyLoading ? (
                <div className="flex flex-col items-center justify-center h-[120px]">
                  <Spinner size="lg" />
                </div>
              ) : (
                <>
                  <p className="text-xl sm:text-2xl font-[200]">28,199,999 ELA</p>
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">91.31% mined</p>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-4">
                    <div className="bg-[#F6921A] h-1.5 rounded-full" style={{ width: '91.31%' }} />
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                    {dataFetched && totalSupply ? totalSupply.toLocaleString() : '25,748,861'} ELA currently
                  </p>
                </>
              )}
            </div>

            <div className="bg-[#ececec] dark:bg-[#5C8EFF]/[0.06] rounded-lg p-3 sm:p-6 shadow-sm">
              <h3 className="text-lg font-medium mb-4">Market Cap</h3>
              {isMarketCapLoading ? (
                <div className="flex flex-col items-center justify-center h-[120px]">
                  <Spinner size="lg" />
                </div>
              ) : (
                <>
                  <p className="text-xl sm:text-2xl font-[200]">
                    ${dataFetched && marketCapData?.elastosMarketCap ? formatNumber(marketCapData.elastosMarketCap) : '28.11M'}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    {dataFetched && marketCapData?.marketCapRatio ? ((marketCapData.marketCapRatio) * 100).toFixed(4) : '0.1749'}% of BTC
                  </p>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-4">
                    <div 
                      className="bg-[#F6921A] h-1.5 rounded-full" 
                      style={{ 
                        width: `${dataFetched && marketCapData?.marketCapRatio 
                          ? ((marketCapData.marketCapRatio) * 100) 
                          : 0.1749}%` 
                      }}
                    />
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                    ${dataFetched && marketCapData?.bitcoinMarketCap ? formatNumber(marketCapData.bitcoinMarketCap) : '1607.22B'} BTC Cap
                  </p>
                </>
              )}
            </div>

            <div className="bg-[#ececec] dark:bg-[#5C8EFF]/[0.06] rounded-lg p-3 sm:p-6 shadow-sm">
              <h3 className="text-lg font-medium mb-4">Current APR</h3>
              {isHashrateLoading ? (
                <div className="flex flex-col items-center justify-center h-[120px]">
                  <Spinner size="lg" />
                </div>
              ) : (
                <>
                  <p className="text-xl sm:text-2xl font-[200]">3.29%</p>
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">5,252,197 ELA staked</p>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-4">
                    <div 
                      className="bg-[#F6921A] h-1.5 rounded-full" 
                      style={{ 
                        width: `${dataFetched && networkStats && totalSupply
                          ? (5252197 / totalSupply) * 100 
                          : 20.4}%` 
                      }} 
                    />
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    {dataFetched && networkStats && totalSupply
                      ? ((5252197 / totalSupply) * 100).toFixed(1) 
                      : '20.4'}% of circulating supply
                  </p>
                </>
              )}
            </div>
          </div>

          {/* Second Row */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-5xl mx-auto mt-6">
            <div className="bg-[#ececec] dark:bg-[#5C8EFF]/[0.06] rounded-lg p-3 sm:p-6 shadow-sm">
              <h3 className="text-lg font-medium mb-4">BTC Security</h3>
              {isHashrateLoading ? (
                <div className="flex flex-col items-center justify-center h-[120px]">
                  <Spinner size="lg" />
                </div>
              ) : (
                <>
                  <p className="text-xl sm:text-2xl font-[200]">
                    {dataFetched && hashrateData?.elastosHashrate && hashrateData?.bitcoinHashrate 
                      ? ((hashrateData.elastosHashrate) / (hashrateData.bitcoinHashrate) * 100).toFixed(2) 
                      : '52.09'}%
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    {dataFetched && hashrateData ? Math.round(hashrateData.elastosHashrate || 0) : 481} EH/s of {dataFetched && hashrateData ? Math.round(hashrateData.bitcoinHashrate || 0) : 924} EH/s
                  </p>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-4">
                    <div 
                      className="bg-[#F6921A] h-1.5 rounded-full" 
                      style={{ 
                        width: dataFetched && hashrateData?.elastosHashrate && hashrateData?.bitcoinHashrate
                          ? `${((hashrateData.elastosHashrate) / (hashrateData.bitcoinHashrate) * 100)}%` 
                          : '52.09%'
                      }} 
                    />
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                    {dataFetched && hashrateData?.elastosHashrate
                      ? ((hashrateData.elastosHashrate) / 1.102).toFixed(2) 
                      : '436.74'} Frontier Supercomputers
                  </p>
                </>
              )}
            </div>

            <div className="bg-[#ececec] dark:bg-[#5C8EFF]/[0.06] rounded-lg p-3 sm:p-6 shadow-sm">
              <h3 className="text-lg font-medium mb-4">Latest Block By</h3>
              {isHashrateLoading ? (
                <div className="flex flex-col items-center justify-center h-[120px]">
                  <Spinner size="lg" />
                </div>
              ) : (
                <>
                  <p className="text-xl sm:text-2xl font-[200]">
                    {dataFetched && currentBlock?.poolInfo?.poolName ? currentBlock.poolInfo.poolName : 'Mined by ViaBTC'}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">Mining Pool</p>
                  <div className="mt-4 pt-[2px] flex justify-center">
                    <button 
                      className="inline-flex px-3 py-2 bg-[rgba(92,142,255,0.15)] text-white rounded-full font-[200] transition-all items-center gap-1 border border-[rgba(92,142,255,0.25)] text-sm justify-center"
                      onClick={() => window.open(dataFetched && currentBlock?.hash 
                        ? `https://ela.elastos.io/api/v1/block/${currentBlock.hash}` 
                        : 'https://ela.elastos.io/api', '_blank')}
                    >
                      <span>Verify</span>
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 35 34" fill="none">
                        <circle cx="17.333" cy="17" r="16.75" stroke="#5C8EFF" strokeOpacity="0.25" strokeWidth="1.5"/>
                        <path d="M17.3338 22.9405L23.2741 17.0002L17.3338 11.0598L16.4162 11.9774L20.7628 16.324H10.8622V17.6763H20.7628L16.4162 22.0229L17.3338 22.9405Z" fill="#5C8EFF"/>
                        <path d="M20.7628 17.6638H10.8747V16.3365H20.7628H20.7929L20.7716 16.3152L16.4338 11.9774L17.3338 11.0775L23.2564 17.0002L17.3338 22.9228L16.4338 22.0229L20.7716 17.6851L20.7929 17.6638H20.7628Z" stroke="#5C8EFF" strokeOpacity="0.25" strokeWidth="1.5"/>
                      </svg>
                    </button>
                  </div>
                </>
              )}
            </div>

            <div className="bg-[#ececec] dark:bg-[#5C8EFF]/[0.06] rounded-lg p-3 sm:p-6 shadow-sm">
              <h3 className="text-lg font-medium mb-4">Next 4 Year Halving</h3>
              <p className="text-xl sm:text-2xl font-[200]">Dec 1, 2025</p>
              <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                {(() => {
                  // Always calculate the current time remaining
                  const now = new Date();
                  const target = new Date('2025-12-01');
                  const diff = Math.max(0, target.getTime() - now.getTime());
                  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                  return `${days}d ${hours}h ${minutes}m remaining`;
                })()}
              </p>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-4">
                <div className="bg-[#F6921A] h-1.5 rounded-full" style={{ 
                  width: `${(() => {
                    // Calculate progress percentage from last halving to next
                    const now = new Date();
                    const lastHalving = new Date('2021-12-01');
                    const nextHalving = new Date('2025-12-01');
                    const totalDuration = nextHalving.getTime() - lastHalving.getTime();
                    const elapsed = now.getTime() - lastHalving.getTime();
                    return Math.min(100, Math.max(0, (elapsed / totalDuration) * 100));
                  })()}%` 
                }} />
              </div>
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                {(() => {
                  // Calculate cycle completion percentage
                  const now = new Date();
                  const lastHalving = new Date('2021-12-01');
                  const nextHalving = new Date('2025-12-01');
                  const totalDuration = nextHalving.getTime() - lastHalving.getTime();
                  const elapsed = now.getTime() - lastHalving.getTime();
                  return (Math.min(100, Math.max(0, (elapsed / totalDuration) * 100))).toFixed(1);
                })()}% of cycle complete
              </p>
            </div>

            <div className="bg-[#ececec] dark:bg-[#5C8EFF]/[0.06] rounded-lg p-3 sm:p-6 shadow-sm">
              <h3 className="text-lg font-medium mb-4">Active Wallets</h3>
              {isHashrateLoading ? (
                <div className="flex flex-col items-center justify-center h-[120px]">
                  <Spinner size="lg" />
                </div>
              ) : (
                <>
                  <p className="text-xl sm:text-2xl font-[200]">
                    {dataFetched && networkStats?.walletAddresses ? networkStats.walletAddresses.toLocaleString() : '235,116'}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">Total Addresses</p>
                  <div className="mt-4 pt-[2px] flex justify-center">
                    <button 
                      className="inline-flex px-3 py-2 bg-[rgba(92,142,255,0.15)] text-white rounded-full font-[200] transition-all items-center gap-1 border border-[rgba(92,142,255,0.25)] text-sm justify-center"
                      onClick={() => window.open("https://ela.elastos.io/api/v1/data-statistics/", '_blank')}
                    >
                      <span>Verify</span>
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 35 34" fill="none"><circle cx="17.333" cy="17" r="16.75" stroke="#5C8EFF" strokeOpacity="0.25" strokeWidth="1.5"/>
                        <path d="M17.3338 22.9405L23.2741 17.0002L17.3338 11.0598L16.4162 11.9774L20.7628 16.324H10.8622V17.6763H20.7628L16.4162 22.0229L17.3338 22.9405Z" fill="#5C8EFF"/>
                        <path d="M20.7628 17.6638H10.8747V16.3365H20.7628H20.7929L20.7716 16.3152L16.4338 11.9774L17.3338 11.0775L23.2564 17.0002L17.3338 22.9228L16.4338 22.0229L20.7716 17.6851L20.7929 17.6638H20.7628Z" stroke="#5C8EFF" strokeOpacity="0.25" strokeWidth="1.5"/>
                      </svg>
                    </button>
                  </div>
                </>
              )}
            </div>
          </div>

        </div>
